// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String 
  email String @unique
  password String
  image String?
  designation String
  role UserRole
  introduction String?
  resumeUrl String
  contacts    Contact?
  
  education Education[]
  experience Experience[]
  skills Skill[]
  projects Project[]
  blogs      Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  admin
}
model Education {
  id String @id @default(uuid())
  degree String
  institution String
  startYear String
  endYear String
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Experience {
  id String @id @default(uuid())
  position String
  company String
  startYear String
  endYear String
  description String
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id String @id @default(uuid())
  name String
  image String?
  parcentage Int
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(uuid())
  title String
  description String
  details String
  url String
  startDate String
  endDate String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id          String      @id @default(uuid())
  title       String
  content     String
  published   Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  phone     String
  email     String
  address   String
  userId    String @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




